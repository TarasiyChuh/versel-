const express = require('express');
const router = express.Router();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { v4: uuidv4 } = require('uuid');
const multer = require('multer');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 }, // –õ—ñ–º—ñ—Ç 5MB
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ JPEG, PNG, GIF!'));
    }
  },
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini API
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const modelName = process.env.GEMINI_MODEL || 'gemini-1.5-flash'; // –ó–º—ñ–Ω–∏–≤ –Ω–∞ –º–æ–¥–µ–ª—å —ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å
const model = genAI.getGenerativeModel({
  model: modelName,
  systemInstruction: `
    –¢–∏ ‚Äî –≤–µ—Å–µ–ª–∏–π —ñ –¥—Ä—É–∂–Ω—ñ–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —ñ–º'—è Cosmo, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ—Ä—Ç–∞–ª—É. 
    –°–ø—ñ–ª–∫—É–π—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—É—á–∞—Å–Ω–∏–π —ñ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å, –¥–æ–¥–∞–≤–∞–π –≥—É–º–æ—Ä —ñ –ø–æ–∑–∏—Ç–∏–≤. 
    –¢–∏ –µ–∫—Å–ø–µ—Ä—Ç —É –≤—ñ–¥–µ–æ—ñ–≥—Ä–∞—Ö, –≤–µ–±-—Ä–æ–∑—Ä–æ–±—Ü—ñ (React, Node.js) —Ç–∞ –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä—ñ. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∞–ª–µ —á—ñ—Ç–∫–æ, —É–Ω–∏–∫–∞–π —Å–∫–ª–∞–¥–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤. 
    –Ø–∫—â–æ –∫–æ–¥, –¥–∞–π —Ä–æ–±–æ—á–µ —Ä—ñ—à–µ–Ω–Ω—è –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º. 
    –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑—É—î—à –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –æ–ø–∏—à–∏ –π–æ–≥–æ –∞–±–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–º—ñ—Å—Ç—É. 
    –ù–µ –∑–Ω–∞—î—à? –ñ–∞—Ä—Ç—É–π: "–û–π, —Ü—å–æ–≥–æ —è –Ω–µ –∑–Ω–∞—é, –∞–ª–µ —Ç—Ä–∏–º–∞–π –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –ø—ñ–∫—Å–µ–ª—ñ!" üòú
  `,
  generationConfig: {
    temperature: 0.9,
    maxOutputTokens: 4096,
  },
});

// –°–µ—Å—ñ—ó
const sessions = {};

// POST /api/gemini-chat
router.post('/', upload.single('image'), async (req, res) => {
  try {
    const { message, sessionId } = req.body;
    const image = req.file;
    console.log('–ó–∞–ø–∏—Ç:', {
      message,
      sessionId,
      model: modelName,
      image: image ? image.mimetype : null,
    });

    if (!message && !image) {
      console.log('–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
      return res.status(400).json({ error: '–ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!' });
    }

    const currentSessionId = sessionId || uuidv4();
    console.log('–°–µ—Å—ñ—è:', currentSessionId);

    if (!sessions[currentSessionId]) {
      console.log('–ù–æ–≤–∞ —Å–µ—Å—ñ—è');
      sessions[currentSessionId] = {
        history: [],
        chatSession: model.startChat({ history: [] }),
        createdAt: Date.now(),
      };
    }

    const session = sessions[currentSessionId];
    const content = [];

    if (message) {
      content.push({ text: message });
    }

    if (image) {
      content.push({
        inlineData: {
          data: image.buffer.toString('base64'),
          mimeType: image.mimetype,
        },
      });
      if (!message) {
        content.unshift({ text: '–û–ø–∏—à–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' });
      }
    }

    session.history.push({ role: 'user', parts: content });

    console.log('–ó–∞–ø–∏—Ç –¥–æ Gemini:', content);
    const result = await session.chatSession.sendMessage(content);
    const response = await result.response;
    const text = response.text();
    console.log('–í—ñ–¥–ø–æ–≤—ñ–¥—å Gemini:', text);

    session.history.push({ role: 'model', parts: [{ text }] });

    res.json({ reply: text, sessionId: currentSessionId });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ Gemini:', {
      message: error.message,
      code: error.code,
      status: error.status,
      details: error.details || '–Ω–µ–º–∞—î –¥–µ—Ç–∞–ª–µ–π',
    });
    res.status(500).json({ error: `Cosmo –∑–∞–≥–ª—é—á–∏–ª–æ: ${error.message}. –ü—Ä–æ–±—É–π —â–µ! üòÖ` });
  }
});

// DELETE /session/:sessionId
router.delete('/session/:sessionId', (req, res) => {
  const { sessionId } = req.params;
  console.log('–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', sessionId);
  delete sessions[sessionId];
  res.json({ message: '–°–µ—Å—ñ—é —Å–∫–∏–Ω—É—Ç–æ!' });
});

module.exports = router;